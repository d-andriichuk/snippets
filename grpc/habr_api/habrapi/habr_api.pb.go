// Code generated by protoc-gen-go. DO NOT EDIT.
// source: habr_api.proto

/*
Package habrapi is a generated protocol buffer package.

It is generated from these files:
	habr_api.proto

It has these top-level messages:
	KarmaRequest
	KarmaResponse
	PostArticleRequest
	PostArticleResponse
*/
package habrapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KarmaRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *KarmaRequest) Reset()                    { *m = KarmaRequest{} }
func (m *KarmaRequest) String() string            { return proto.CompactTextString(m) }
func (*KarmaRequest) ProtoMessage()               {}
func (*KarmaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KarmaRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type KarmaResponse struct {
	Username string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Karma    float32 `protobuf:"fixed32,2,opt,name=karma" json:"karma,omitempty"`
}

func (m *KarmaResponse) Reset()                    { *m = KarmaResponse{} }
func (m *KarmaResponse) String() string            { return proto.CompactTextString(m) }
func (*KarmaResponse) ProtoMessage()               {}
func (*KarmaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KarmaResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *KarmaResponse) GetKarma() float32 {
	if m != nil {
		return m.Karma
	}
	return 0
}

type PostArticleRequest struct {
	Title string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Body  string   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Tag   []string `protobuf:"bytes,3,rep,name=tag" json:"tag,omitempty"`
	Hub   []string `protobuf:"bytes,4,rep,name=hub" json:"hub,omitempty"`
}

func (m *PostArticleRequest) Reset()                    { *m = PostArticleRequest{} }
func (m *PostArticleRequest) String() string            { return proto.CompactTextString(m) }
func (*PostArticleRequest) ProtoMessage()               {}
func (*PostArticleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PostArticleRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PostArticleRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *PostArticleRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *PostArticleRequest) GetHub() []string {
	if m != nil {
		return m.Hub
	}
	return nil
}

type PostArticleResponse struct {
	Posted    bool   `protobuf:"varint,1,opt,name=posted" json:"posted,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Time      string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	ErrorCode string `protobuf:"bytes,4,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *PostArticleResponse) Reset()                    { *m = PostArticleResponse{} }
func (m *PostArticleResponse) String() string            { return proto.CompactTextString(m) }
func (*PostArticleResponse) ProtoMessage()               {}
func (*PostArticleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PostArticleResponse) GetPosted() bool {
	if m != nil {
		return m.Posted
	}
	return false
}

func (m *PostArticleResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PostArticleResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *PostArticleResponse) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func init() {
	proto.RegisterType((*KarmaRequest)(nil), "habrapi.KarmaRequest")
	proto.RegisterType((*KarmaResponse)(nil), "habrapi.KarmaResponse")
	proto.RegisterType((*PostArticleRequest)(nil), "habrapi.PostArticleRequest")
	proto.RegisterType((*PostArticleResponse)(nil), "habrapi.PostArticleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HabrApi service

type HabrApiClient interface {
	GetKarma(ctx context.Context, in *KarmaRequest, opts ...grpc.CallOption) (*KarmaResponse, error)
	PostArticle(ctx context.Context, in *PostArticleRequest, opts ...grpc.CallOption) (*PostArticleResponse, error)
}

type habrApiClient struct {
	cc *grpc.ClientConn
}

func NewHabrApiClient(cc *grpc.ClientConn) HabrApiClient {
	return &habrApiClient{cc}
}

func (c *habrApiClient) GetKarma(ctx context.Context, in *KarmaRequest, opts ...grpc.CallOption) (*KarmaResponse, error) {
	out := new(KarmaResponse)
	err := grpc.Invoke(ctx, "/habrapi.HabrApi/GetKarma", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habrApiClient) PostArticle(ctx context.Context, in *PostArticleRequest, opts ...grpc.CallOption) (*PostArticleResponse, error) {
	out := new(PostArticleResponse)
	err := grpc.Invoke(ctx, "/habrapi.HabrApi/PostArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HabrApi service

type HabrApiServer interface {
	GetKarma(context.Context, *KarmaRequest) (*KarmaResponse, error)
	PostArticle(context.Context, *PostArticleRequest) (*PostArticleResponse, error)
}

func RegisterHabrApiServer(s *grpc.Server, srv HabrApiServer) {
	s.RegisterService(&_HabrApi_serviceDesc, srv)
}

func _HabrApi_GetKarma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KarmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabrApiServer).GetKarma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habrapi.HabrApi/GetKarma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabrApiServer).GetKarma(ctx, req.(*KarmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabrApi_PostArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabrApiServer).PostArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habrapi.HabrApi/PostArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabrApiServer).PostArticle(ctx, req.(*PostArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HabrApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "habrapi.HabrApi",
	HandlerType: (*HabrApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKarma",
			Handler:    _HabrApi_GetKarma_Handler,
		},
		{
			MethodName: "PostArticle",
			Handler:    _HabrApi_PostArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "habr_api.proto",
}

func init() { proto.RegisterFile("habr_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x24, 0x4d, 0x5f, 0x59, 0x1e, 0x42, 0x4b, 0xa9, 0xac, 0x02, 0x52, 0x95, 0x53, 0xc5, 0xa1,
	0x07, 0x38, 0x72, 0xaa, 0x38, 0x80, 0xe0, 0x82, 0xfc, 0x03, 0x95, 0xdd, 0xac, 0xa8, 0x45, 0x53,
	0x1b, 0xdb, 0x39, 0xf0, 0x1b, 0x7c, 0x31, 0xb2, 0x93, 0x54, 0xe5, 0x21, 0x6e, 0x33, 0xe3, 0xd1,
	0xcc, 0x6a, 0x0c, 0x27, 0x6b, 0x21, 0xed, 0x52, 0x18, 0x35, 0x37, 0x56, 0x7b, 0x8d, 0x83, 0xc0,
	0x85, 0x51, 0xf9, 0x35, 0x1c, 0x3d, 0x0b, 0x5b, 0x0a, 0x4e, 0xef, 0x15, 0x39, 0x8f, 0x13, 0x18,
	0x56, 0x8e, 0xec, 0x56, 0x94, 0xc4, 0x92, 0x69, 0x32, 0xcb, 0xf8, 0x8e, 0xe7, 0x0b, 0x38, 0x6e,
	0xbc, 0xce, 0xe8, 0xad, 0xa3, 0xff, 0xcc, 0x38, 0x82, 0xde, 0x5b, 0x30, 0xb3, 0xce, 0x34, 0x99,
	0x75, 0x78, 0x4d, 0x72, 0x09, 0xf8, 0xa2, 0x9d, 0x5f, 0x58, 0xaf, 0x56, 0x1b, 0x6a, 0x4b, 0x47,
	0xd0, 0xf3, 0xca, 0x6f, 0xda, 0x90, 0x9a, 0x20, 0x42, 0x57, 0xea, 0xe2, 0x23, 0x06, 0x64, 0x3c,
	0x62, 0x3c, 0x85, 0xd4, 0x8b, 0x57, 0x96, 0x4e, 0xd3, 0x59, 0xc6, 0x03, 0x0c, 0xca, 0xba, 0x92,
	0xac, 0x5b, 0x2b, 0xeb, 0x4a, 0xe6, 0x16, 0xce, 0xbe, 0x75, 0x34, 0xc7, 0x8e, 0xa1, 0x6f, 0xb4,
	0xf3, 0x54, 0xc4, 0x96, 0x21, 0x6f, 0x58, 0x08, 0xa8, 0xec, 0xa6, 0x69, 0x09, 0x30, 0x14, 0x7b,
	0x55, 0x12, 0x4b, 0xeb, 0xe2, 0x80, 0xf1, 0x0a, 0x80, 0xac, 0xd5, 0x76, 0xb9, 0xd2, 0x05, 0xb1,
	0x6e, 0x7c, 0xc9, 0xa2, 0x72, 0xaf, 0x0b, 0xba, 0xf9, 0x4c, 0x60, 0xf0, 0x28, 0xa4, 0x5d, 0x18,
	0x85, 0x77, 0x30, 0x7c, 0x20, 0x1f, 0x97, 0xc2, 0xf3, 0x79, 0x33, 0xf4, 0x7c, 0x7f, 0xe5, 0xc9,
	0xf8, 0xa7, 0x5c, 0xdf, 0x98, 0x1f, 0xe0, 0x13, 0x1c, 0xee, 0x1d, 0x8f, 0x17, 0x3b, 0xe3, 0xef,
	0xd9, 0x26, 0x97, 0x7f, 0x3f, 0xb6, 0x59, 0xb2, 0x1f, 0xff, 0xfa, 0xf6, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x3e, 0x57, 0x00, 0x49, 0xfd, 0x01, 0x00, 0x00,
}
